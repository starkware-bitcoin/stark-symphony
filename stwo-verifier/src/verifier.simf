// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

#ifndef VERIFIER_SIMF
#define VERIFIER_SIMF

#include "config.simf"
#include "pow.simf"
#include "deep/oods.simf"
#include "evals/commit.simf"
#include "evals/decommit.simf"
#include "fri/commit.simf"
#include "fri/answers.simf"
#include "fri/decommit.simf"

/// Stwo proof:
/// * trace log size
/// * commitments
/// * OODS trace evaluations and CP evaluation (partitioned) at OODS point
/// * FRI commitments
/// * PoW nonce
type Proof = (
    u8,
    Commitments,
    Decommitments,
    OodsEvals,
    FriCommitments,
    u64,
);

/// Verify Stwo proof.
fn verify_proof(proof: Proof) {
    let (log_size, commitments, decommitments, oods_evals, fri_commitments, pow_nonce): Proof = proof;

    // Initialize Prover <> Verifier non-interactive channel
    let state: ChannelState = channel_init();

    // Commit to trace & composition polynomial (CP) evaluations
    let (state, cp_alpha): (ChannelState, QM31) = evals_commit(state, commitments);

    // Read trace evaluations and CP evaluation (partitioned) at out-of-domain point
    let (state, random_coeff, oods_point): (ChannelState, QM31, QM31Point) = oods(state, log_size, oods_evals, cp_alpha);

    // Commit to FRI layers
    let (state, fri_layers): (ChannelState, FriLayers) = fri_commit(state, fri_commitments);

    // Verify proof of work
    let state: ChannelState = check_proof_of_work(state, pow_nonce);

    // Read and decommit evaluations at queried positions
    let (state, query_responses): (ChannelState, QueryResponses) = evals_decommit(state, log_size, commitments, decommitments);

    // Compute DEEP quotients at queried positions
    let fri_answers: FriAnswers = fri_answers(query_responses, random_coeff, oods_point, oods_evals, log_size);
    
    // Run FRI protocol for all the queries
    fri_decommit(fri_layers, fri_answers);
}

fn test_verify_proof() {
    let proof: Proof = (
        10,
        (
            0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855,
            0xbef91ef39ee85f484d625afbccf9cb3c0626bc753fdd2742b69dcbf63a7e1167,
            0x28bee4d01f3b1fea21370e41787a21fb14abbc671bff311be7215797d015ed61,
        ),
        [
            (
                ([[1], [139410720], [1700013473], [298840277]], list![0x7b27887a046ef1ceac6106a5dd5adad6ac6d52fbcf7f810cc4bbd67a2ba11d01, 0x3fd8f403637057955845055ea195fe6cea263623bcae2d9d2d564aa76cc8d135, 0xaedbb8a864c46fc6e45300d3728d0ab4aaf9dbc411c2541e39487912e8c146e3, 0x69915d342b04f9e2b07f0bd6e7a19788d34a80a7af8fc7624f5fbaae3e99cd83, 0x165a99657ea0a068152b7d570fb13fabcb91dd183fb0972135f869b04442802d, 0x095731161be9f3e3f0be374544de54f1a76e07d3f44484bcfd1c57e6ac252c22, 0xa2d2e46f6f7b03b946d92c4d7a1cb4de55fce28decb46f3bfe161a476d50ab31, 0x1fdbaad70ec724f0d2466f555a678b5b09b3ddc0c25379eaa2dedc1f1078ba05, 0xce8c33782b132040204d1ad98cf19abb279d5015548f8e65f84148983627c542, 0x24e8dadfae159acb643568b262a7eefb5828d67985d1639d3b9b11ac3d04abe7, 0xf7cea25c290e4f092eb3d666ba8452f72fa2a8886bad938d543d9f6d804b7533]),
                ([1147251298, 1722372683, 1729749398, 1974162199, 321853455, 1373396954, 958279341, 252872847, 2017820635, 597429825, 413704560, 383544542, 134226940, 1803642786, 127014568, 403273301], list![0xdd4903110a1cc960e0120c1492ff7f097277a6b3bb3c6ae8a5336cdd5dd8f3cf, 0x5fa56aaedbe52846217f77e3c229d70e9e75252056de03bafe9acdd215ab08e9, 0xb7a042cf250ef416848de8f6d7c0bd05878e7fb497d0fbb030335dafc284165c, 0x3975e82c2ea944e62998d85fedc513fc873b3e8c29cb86d06ee0afd2e1980cad, 0x0b128dc96c42df2dc399f4b5aca393cb975e4048744dc4c11a1ce6d1b14b0204, 0x9701625a840e2c0700cfcfe42ce419be6427ebd1ccb685c9dc6ff0e6dcb0ec94, 0x646d86fba4d6637ec12cc43b6c43344429206158b4043fa25923bc7ba391db7d, 0x1fc2a1b529fbc849d737125701706bac43134b4a9bd85245eda42ab0689436d3, 0xf6a8cd8117c2e53ea032bdadd8038b9325d0d961f8e27f94541f96c6336f2841, 0x67ef4010514c8b554774572a69b28ac63b6f4cda178c5de872823ebe91bcf363, 0x283040a0fd5c9a0569190187a9e168c0ab058aab70c0290dd3ef12f37cc22ee1]),
            )
        ],
        (
            [[qm31(1, 0, 0, 0)], [qm31(1681911681, 1773265243, 1736861756, 1228667694)], [qm31(194747945, 500970143, 1469536596, 1498438001)], [qm31(494281534, 148837544, 35002031, 430043267)]],
            [qm31(942572736, 713947206, 1753835565, 923186572), qm31(97332001, 342131944, 1894222083, 2072090188), qm31(1490230811, 1087931036, 668468424, 922520224), qm31(1863531657, 1293297427, 923741000, 1065768851), qm31(1398824300, 456591405, 1146222520, 449830787), qm31(397850325, 1477154358, 1349579272, 2074584503), qm31(1382913126, 437073405, 1043118352, 591381955), qm31(1168571065, 1338937485, 568253456, 917989840), qm31(1593177592, 626071749, 1262374577, 1408096041), qm31(1970440065, 1229270954, 1309403567, 1265979775), qm31(254727105, 2035590042, 2025080508, 2125237178), qm31(543543694, 1651569529, 670706689, 656511865), qm31(2044956127, 393858995, 1223680858, 216725672), qm31(278079246, 1363809514, 1226114987, 410108198), qm31(843237768, 1433322275, 625580103, 61831646), qm31(2025027313, 1914672673, 548949768, 892288245)],
        ),
        (
            0x38b6fc3257d247a8c73306d347a2a2244a990c73486ae59da9f207734fc50490,
            list![0x33aefc1aed2ca0df49d2b098eafbcd5a65cb9301b221b2d4e322ad404c7bc732, 0x2eab369c60f529bad6f64f4e4f52f0c4f3d5c8df7a85d2b1e3e6db90edc1675c, 0x84bcef84393cb9011b8f97317f117553cff4c0d0a18cd24f94c4d37a961c63e5, 0xed307d62d3d04baa7ec8e430b58d8e2c2257590f281c13d56d80adcb50f1d9ab, 0x601588b86c5313dc2214dbd6d69907e59915cb017610a18bcbc27ba629a4e740, 0x8f3b2970a06e4aa30862cd74b884d3285cfd4681539974fa6a701f013696e801, 0x17cd0d882a6200e6b44372ef1bbff75e245a7f8ff56160069daef6bcc9e9015a, 0x30ea91a9f6aa9545b621a57e56afe0b3a1345da68556673bd4fd72ba1d394c6c, 0xe0332e64adda972dd7634136609c4050ae2e720eed1e393244c276b3e3e99f60],
            list![qm31(1993530748, 1540867123, 805781148, 712513523)],
        ),
        15
    );
    verify_proof(proof);
}

#endif
