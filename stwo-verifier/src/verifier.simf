// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

#ifndef VERIFIER_SIMF
#define VERIFIER_SIMF

#include "config.simf"
#include "pow.simf"
#include "deep/oods.simf"
#include "evals/commit.simf"
#include "evals/verify.simf"
#include "fri/commit.simf"
#include "fri/answers.simf"
//#include "fri/verify.simf"

/// Stwo proof:
/// * commitments
/// * OODS trace evaluations and CP evaluation (partitioned) at OODS point
/// * FRI commitments
/// * PoW nonce
type Proof = (
    Commitments,
    [Decommitment; NUM_FRI_QUERIES],
    OodsEvals,
    FriCommitments,
    //[FriDecommitment; NUM_FRI_QUERIES],
    u64,
);

/// Verify Stwo proof.
fn verify_proof(proof: Proof) {
    let (commitments, decommitments, oods_evals, fri_commitments, pow_nonce): Proof = proof;

    // Initialize Prover <> Verifier non-interactive channel
    let state: ChannelState = channel_init();

    // Commit to trace & composition polynomial (CP) evaluations
    let (state, cp_alpha): (ChannelState, QM31) = evals_commit(state, commitments);

    // Read trace evaluations and CP evaluation (partitioned) at out-of-domain point
    let (state, random_coeff, oods_point): (ChannelState, QM31, QM31Point) = oods(state, TRACE_LOG_SIZE, oods_evals, cp_alpha);

    // Commit to FRI layers
    let (state, fri_layers): (ChannelState, FriLayers) = fri_commit(state, fri_commitments);

    // Verify proof of work
    let state: ChannelState = check_proof_of_work(state, pow_nonce);

    // Read and verify evaluation decommitments at queried positions
    let (state, query_responses): (ChannelState, [QueryResponse; NUM_FRI_QUERIES]) = evals_verify(state, LDE_LOG_SIZE, commitments, decommitments);

    // Compute DEEP quotients at queried positions
    let fri_answers: [FriAnswer; NUM_FRI_QUERIES] = fri_answers(query_responses, random_coeff, oods_point, oods_evals, LDE_LOG_SIZE);
    
    // Run FRI protocol for all the queries
    //fri_verify(fri_layers, fri_decommitment, fri_answers, LDE_LOG_SIZE);
}

fn test_verify_proof() {
    let proof: Proof = (
        (
            0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855,
            0xc65ea783c23a8098b4ee6f1305f7ccfbbc2ed12a09cd1e3634ee33c9829a7a0d,
            0xf8a31f3f2cd5929ad666eb5a433464a4dac64ccbc23761e4ee3a49493b63d5b1,
        ),
        [
            (
                ([[1], [1097248027], [203043143], [388317402]], list![0x87c06c0233ea3adf4fcf0b44e1093133c53ac0b1bf624a4d9a0188870be4103b, 0xbda875c57a1e13a092469061192b21ca6fe76d6b3c766aa782eb45b0b5678a29, 0xc03e0de290efcb5b56e1ded846fc0c186de756e207579c7fec38cc7a084984d8, 0x24bbed5e4abbf4ef71845fb597c940bd2af90c1d9a92f7531401dedcacc3d0b8]),
                ([24417571, 734177972, 1061304697, 1743749941, 1773515215, 1064335009, 786846002, 665182420, 1394349939, 721175540, 1100190593, 545196695, 1486897469, 1000256507, 497011414, 895484187], list![0xd273f15b2722296af2ea3cad066a6d7d45cf521a8b2890a32cea25ae6ad71556, 0xa3d664316fb27a7ed950efdf3b086997936f54ee59fc681dfcf48bc2d4babde8, 0x8ddce621c685b8500c8f81bdd2736f4af1aae7ed49d0251b4a009e5f19d4477b, 0x1dd9d1d0b9e7d21fb0de6f598215b28af6f26dfdc1e6507ea2ffcc54f4ca1888]),
            )
        ],
        (
            [[qm31(1, 0, 0, 0)], [qm31(990025692, 1389754042, 1487506423, 685694764)], [qm31(894089319, 667649104, 649371519, 704390464)], [qm31(1642360473, 1090843745, 482993750, 784842214)]],
            [qm31(959920549, 1760794918, 311260133, 1512597505), qm31(1511409668, 907835411, 1049830705, 2141520948), qm31(463626816, 727784487, 149742880, 93949568), qm31(1743749941, 0, 0, 0), qm31(2102633028, 1482184202, 1940121136, 1068512960), qm31(1032673586, 1816881966, 1689865120, 1475984463), qm31(786846002, 0, 0, 0), qm31(665182420, 0, 0, 0), qm31(1898289524, 2067715955, 2045793037, 1523138896), qm31(2091510314, 1151197826, 1007057364, 460154002), qm31(1100190593, 0, 0, 0), qm31(545196695, 0, 0, 0), qm31(1044506623, 1399438977, 688902540, 1384536142), qm31(595558306, 676448493, 2076120789, 108484436), qm31(497011414, 0, 0, 0), qm31(895484187, 0, 0, 0)],
        ),
        (
            0x26da5011fe955be570da501ab3d42f3903913fa59554a6ec8bfbbc9c66d84b5b,
            [0x0d11aa22f18af5f6f5e8f7a844d359a82bffb5f18c12a29722a09884bc3a7b17, 0x8bcd04bf4645c85a8040bb8f29c588023e540fe9a8d1d22396d784ffbef71c40],
            qm31(1851250268, 910573865, 1450294152, 1860964773),
        ),
        185
    );
    verify_proof(proof);
}

#endif
