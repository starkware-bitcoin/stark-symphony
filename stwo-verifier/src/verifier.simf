// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

#ifndef VERIFIER_SIMF
#define VERIFIER_SIMF

#include "config.simf"
#include "pow.simf"
#include "deep/oods.simf"
#include "evals/commit.simf"
#include "evals/verify.simf"
#include "fri/commit.simf"
#include "fri/answers.simf"
#include "fri/verify.simf"

/// Stwo proof:
/// * commitments
/// * OODS trace evaluations and CP evaluation (partitioned) at OODS point
/// * FRI commitments
/// * PoW nonce
type StarkProof = (
    Commitments,
    Decommitments,
    OodsEvals,
    FriCommitments,
    FriDecommitments,
    u64,
);

/// Verify Stwo proof.
fn verify_proof(proof: StarkProof) {
    let (commitments, decommitments, oods_evals, fri_commitments, fri_decommitments, pow_nonce): StarkProof = proof;

    // Initialize Prover <> Verifier non-interactive channel
    let state: ChannelState = channel_init();

    // Commit to trace & composition polynomial (CP) evaluations
    let (state, cp_alpha): (ChannelState, QM31) = evals_commit(state, commitments);

    // Read trace evaluations and CP evaluation (partitioned) at out-of-domain point
    let (state, random_coeff, oods_point): (ChannelState, QM31, QM31Point) = oods(state, TRACE_LOG_SIZE, oods_evals, cp_alpha);

    // Commit to FRI layers
    let (state, fri_layers): (ChannelState, FriLayers) = fri_commit(state, fri_commitments);

    // Verify proof of work
    let state: ChannelState = check_proof_of_work(state, pow_nonce);

    // Read and verify evaluation decommitments at queried positions
    let (state, query_responses): (ChannelState, [QueryResponse; NUM_FRI_QUERIES]) = evals_verify(state, LDE_LOG_SIZE, commitments, decommitments);

    // Compute DEEP quotients at queried positions
    let fri_answers: [FriAnswer; NUM_FRI_QUERIES] = fri_answers(query_responses, random_coeff, oods_point, oods_evals, LDE_LOG_SIZE);
    
    // Run FRI protocol for all the queries
    fri_verify(fri_layers, fri_decommitments, fri_answers, LDE_LOG_SIZE);
}

#ifdef TESTING

fn test_verify_proof() {
    let proof: StarkProof = (
        (
            0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855,
            0x2143f75d71572fd6cc57f586b6713dd237ce03e0e6992ef8e2199ed653129c7f,
            0x83e5557f761f237e20462300295aa53c3480f3f0907bd5b1e4f89ffdc6f950bc,
        ),
        [
            (
                ([[1], [495602521], [1874631582], [1174813791]], list![0x61d89893714f17dacc2219d98fe3213716140fb03a2b712ddfe03fdac7b74b2d, 0x97e6ead6d49cc7289a7ec47c2c09ae05851c06dde5028b976c3a8a03c547bfa1, 0xd02fe24628e6d523938e57fc793a98c320e4b75b121faa830d2e8f95f2abaee0]),
                ([1840623278, 1926730915, 2147287039, 0, 1265893248, 993651831, 0, 0, 236821717, 325156552, 0, 0, 2110497226, 1488481922, 0, 0], list![0x2b1f2f773bdf244640f9aaa3a3ba28aa7a413cbc28c1acf7f1a8c27e14e14cf3, 0x81886da63943805c745dbabf91e86d53f89ce5c850f52ec5e8ead438ce4418c9, 0xf628a1fa959d01d179e48d47c159e90990585cea53ca23fb8bcbdfc30781201b]),
            ),
            (
                ([[1], [685934190], [1479679650], [1987963821]], list![0xe2001a5e424c99d8c3d98fa058a4c74ac8b46df21cacd34caaa7759d1e4f9c34, 0x75b029c8fbfd67f99e5f1b279c360877a2a5c227af08e1b7b6f94a6feeef31b0, 0x69f2e9ac67967a94883c68a74cb609273320dce6a99fc84065ea9416c83b257d]),
                ([255532734, 1926730915, 2147287039, 0, 103711456, 993651831, 0, 0, 1045706712, 325156552, 0, 0, 2018446308, 1488481922, 0, 0], list![0x01a04ceb948c0c7c2b82f677d8d1fbf1ea1fa272717e273f26d9b0ce298732eb, 0x1a843fc5553f6dd69fccb5b3d4d7509f20e975b32297f7cf0d8e3a48d7e7b81c, 0x64d3eced8aa8875eb9cf93c66e04692d9e2692cb72d81c39a2e9e2a7e705db66]),
            )
        ],
        (
            [[qm31(1, 0, 0, 0)], [qm31(1797189428, 839506300, 1721301342, 292932476)], [qm31(881434302, 1060073241, 1812803160, 1398461599)], [qm31(97840771, 464211091, 1355750702, 313051562)]],
            [qm31(966730086, 1462478069, 1315113869, 1990345901), qm31(1926730915, 0, 0, 0), qm31(2147287039, 0, 0, 0), qm31(0, 0, 0, 0), qm31(1317930917, 1374718402, 712050139, 1370177233), qm31(993651831, 0, 0, 0), qm31(0, 0, 0, 0), qm31(0, 0, 0, 0), qm31(405672598, 127199241, 1333725168, 1787838384), qm31(325156552, 0, 0, 0), qm31(0, 0, 0, 0), qm31(0, 0, 0, 0), qm31(619170708, 1581675393, 397456776, 298573012), qm31(1488481922, 0, 0, 0), qm31(0, 0, 0, 0), qm31(0, 0, 0, 0)],
        ),
        (
            [0x0bee0d98d63597a3b6725c885e77c23647585e29ae3ebd3b3b88bdba21f30f13, 0xd63312459c0bd0456789cce101ab292880c3bf103514eb22bd7457808388423e],
            qm31(502777192, 1639915013, 504572960, 826242631),
        ),
        [
            [
                (
                    qm31(1809419111, 354539711, 970964582, 1453930338),
                    list![0xbe21aefac7a805d66c98a19391bde0a40446980060a896c54fa7712bfcb24c00, 0x9edf91e94b166d0f659b03a5b83488daeb3b281b2441277a86be8ea932ba7dac]
                ),
                (
                    qm31(362863828, 1620549845, 1455808181, 1574486049),
                    list![0x104038fa63bd74b24f4f1310409ef97d98964c729d9596210db46feda6d68f97, 0xb35922cbb999dbfa7cdfb3d75192564bb0c85b2e4199b4d68dcd9aab5610b6a2]
                )
            ],
            [   
                (
                    qm31(44659871, 1630093315, 908540539, 1793391115),
                    list![0x287a2be14307225595338d21aa36214ebdfb070d41b932b9da2039a701a96498]
                ),
                (
                    qm31(1842119355, 57104583, 1394870990, 2006191685),
                    list![0xb45a5ee28db304c1a4b75b88312d685d22b35019f970b5bddb1910d7c2ef826b]
                )
            ]
        ],
        2
    );
}

#endif // TESTING

#endif
