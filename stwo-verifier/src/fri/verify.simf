// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

#ifndef FRI_DECOMMIT_SIMF
#define FRI_DECOMMIT_SIMF

#include "config.simf"
#include "groups/circle_domain.simf"
#include "fri/layers.simf"
#include "macros/array_zip.simf"
#include "macros/array_map.simf"
#include "macros/array_fold.simf"

/// FRI decommitment for a single layer:
type FriLayerDecommitment = [FriQueryDecommitment; NUM_FRI_QUERIES];

/// FRI decommitment:
/// * first layer decommitments
/// * inner layers decommitments
type FriDecommitments = (FriLayerDecommitment, [FriLayerDecommitment; NUM_FRI_LAYERS]);

// CONFIG: see NUM_FRI_QUERIES.
DEFINE_ZIP_ARR_1(fri_layer_data, FriAnswer, FriLayerDecommitment)
DEFINE_ZIP_ARR(fri_layer_data, FriAnswer, FriLayerDecommitment, 2, 1)
DEFINE_ZIP_ARR(fri_layer_data, FriAnswer, FriLayerDecommitment, 4, 2)
DEFINE_ZIP_ARR(fri_layer_data, FriAnswer, FriLayerDecommitment, 8, 4)
DEFINE_ZIP_ARR(fri_layer_data, FriAnswer, FriLayerDecommitment, 16, 8)

fn fri_layer_data_zip_arr(fri_answers: [FriAnswer; NUM_FRI_QUERIES], fri_layer_decommitment: FriLayerDecommitment) -> [(FriAnswer, FriLayerDecommitment); NUM_FRI_QUERIES] {
#ifdef TESTING
    fri_layer_data_zip_arr_1(fri_answers, fri_layer_decommitment)
#else
    fri_layer_data_zip_arr_16(fri_answers, fri_layer_decommitment)
#endif // TESTING
}

// CONFIG: see NUM_FRI_QUERIES.
DEFINE_MAP_ARR_1((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_first_layer)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_first_layer, 2, 1)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_first_layer, 4, 2)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_first_layer, 8, 4)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_first_layer, 16, 8)

fn fri_verify_first_layer_map_arr(data: [(FriAnswer, FriQueryDecommitment); NUM_FRI_QUERIES], context: FriLayerContext) -> ([FriAnswer; NUM_FRI_QUERIES], FriLayerContext) {
#ifdef TESTING
    fri_verify_first_layer_map_arr_1(data, context)
#else
    fri_verify_first_layer_map_arr_16(data, context)
#endif // TESTING
}

// CONFIG: see NUM_FRI_QUERIES.
DEFINE_MAP_ARR_1((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_inner_layer)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_inner_layer, 2, 1)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_inner_layer, 4, 2)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_inner_layer, 8, 4)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_inner_layer, 16, 8)

fn fri_verify_inner_layer_map_arr(data: [(FriAnswer, FriQueryDecommitment); NUM_FRI_QUERIES], context: FriLayerContext) -> ([FriAnswer; NUM_FRI_QUERIES], FriLayerContext) {
#ifdef TESTING
    fri_verify_inner_layer_map_arr_1(data, context)
#else
    fri_verify_inner_layer_map_arr_16(data, context)
#endif // TESTING
}

// CONFIG: see NUM_FRI_LAYERS.
DEFINE_ZIP_ARR_1(fri_inner_layer, FriLayer, FriLayerDecommitment)
DEFINE_ZIP_ARR(fri_inner_layer, FriLayer, FriLayerDecommitment, 2, 1)
DEFINE_ZIP_ARR(fri_inner_layer, FriLayer, FriLayerDecommitment, 4, 2)
DEFINE_ZIP_ARR(fri_inner_layer, FriLayer, FriLayerDecommitment, 8, 4)

fn fri_inner_layer_zip_arr(fri_layer: FriLayer, fri_layer_decommitment: FriLayerDecommitment) -> [(FriLayer, FriLayerDecommitment); NUM_FRI_LAYERS] {
#ifdef TESTING
    fri_inner_layer_zip_arr_2(fri_layer, fri_layer_decommitment)
#else
    fri_inner_layer_zip_arr_8(fri_layer, fri_layer_decommitment)
#endif // TESTING
}

fn fri_verify_inner_layer(fri_layer_decommitment: FriLayerDecommitment, acc: ([FriAnswer; NUM_FRI_QUERIES], FriLayerContext)) -> ([FriAnswer; NUM_FRI_QUERIES], FriLayerContext) {



/// Verify FRI decommitments.
fn fri_verify(fri_layers: FriLayers, fri_decommitments: FriDecommitments, fri_answers: [FriAnswer; NUM_FRI_QUERIES], log_size_ex: u8) {
    let (first_layer, inner_layers, last_layer): FriLayers = fri_layers;
    let (first_layer_decommitment, inner_layers_decommitment): FriDecommitments = fri_decommitments;
    
    // Zip fri answers with first layer decommitments and verify the first layer
    let first_layer_data: [(FriAnswer, FriQueryDecommitment); NUM_FRI_QUERIES] = fri_layer_data_zip_arr(fri_answers, first_layer_decommitment);
    let first_layer_context: FriLayerContext = (first_layer, log_size_ex);
    let (first_layer_results, _): ([FriAnswer; NUM_FRI_QUERIES], FriLayerContext) = fri_verify_first_layer_map_arr(first_layer_data, first_layer_context);

    // Zip inner layer commitments with inner layers decommitments and verify the inner layers
    let inner_layer_data = fri_inner_layer_zip_arr(inner_layers, inner_layers_decommitment);
    let inner_layer_acc = (first_layer_results, jet::divide_8(log_size_ex, 2));

    let inner_layer_items: [(FriAnswer, FriQueryDecommitment); NUM_FRI_QUERIES] = fri_layer_data_zip_arr(first_layer_results, inner_layers_decommitment);
    let (inner_layer_results, _): ([FriAnswer; NUM_FRI_QUERIES], FriLayerContext) = fri_verify_inner_layer_map_arr(inner_layer_items, inner_layer_context);

    // Verify the last layer
    fri_verify_last_layer(last_layer, log_size_ex, last_layer_items);
}

#endif
