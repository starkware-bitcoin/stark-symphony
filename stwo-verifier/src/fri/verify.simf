// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

#ifndef FRI_VERIFY_SIMF
#define FRI_VERIFY_SIMF

#include "config.simf"
#include "fri/layers.simf"
#include "macros/array_zip.simf"
#include "macros/array_map.simf"
#include "macros/array_fold.simf"

/// FRI decommitment for a single layer:
type FriLayerDecommitment = [FriQueryDecommitment; NUM_FRI_QUERIES];

/// FRI decommitments: first and inner layers
type FriDecommitments = [FriLayerDecommitment; NUM_FRI_LAYERS];

type FriLayerAccumulator = ([FriAnswer; NUM_FRI_QUERIES], u8);

// CONFIG: see NUM_FRI_QUERIES.
DEFINE_ZIP_ARR_1(fri_layer_data, FriAnswer, FriQueryDecommitment)
DEFINE_ZIP_ARR(fri_layer_data, FriAnswer, FriQueryDecommitment, 2, 1)
DEFINE_ZIP_ARR(fri_layer_data, FriAnswer, FriQueryDecommitment, 4, 2)
DEFINE_ZIP_ARR(fri_layer_data, FriAnswer, FriQueryDecommitment, 8, 4)
DEFINE_ZIP_ARR(fri_layer_data, FriAnswer, FriQueryDecommitment, 16, 8)

fn fri_layer_data_zip_arr(fri_answers: [FriAnswer; NUM_FRI_QUERIES], fri_layer_decommitment: [FriQueryDecommitment; NUM_FRI_QUERIES]) -> [(FriAnswer, FriQueryDecommitment); NUM_FRI_QUERIES] {
#ifdef TESTING
    fri_layer_data_zip_arr_2(fri_answers, fri_layer_decommitment)
#else
    fri_layer_data_zip_arr_16(fri_answers, fri_layer_decommitment)
#endif // TESTING
}

// CONFIG: see NUM_FRI_QUERIES.
DEFINE_MAP_ARR_1((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_query)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_query, 2, 1)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_query, 4, 2)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_query, 8, 4)
DEFINE_MAP_ARR((FriAnswer, FriQueryDecommitment), FriAnswer, FriLayerContext, fri_verify_query, 16, 8)

fn fri_verify_query_map_arr(data: [(FriAnswer, FriQueryDecommitment); NUM_FRI_QUERIES], context: FriLayerContext) -> ([FriAnswer; NUM_FRI_QUERIES], FriLayerContext) {
#ifdef TESTING
    fri_verify_query_map_arr_2(data, context)
#else
    fri_verify_query_map_arr_16(data, context)
#endif // TESTING
}

// CONFIG: see NUM_FRI_LAYERS.
DEFINE_ZIP_ARR_1(fri_layer, FriLayer, FriLayerDecommitment)
DEFINE_ZIP_ARR(fri_layer, FriLayer, FriLayerDecommitment, 2, 1)
DEFINE_ZIP_ARR(fri_layer, FriLayer, FriLayerDecommitment, 4, 2)
DEFINE_ZIP_ARR(fri_layer, FriLayer, FriLayerDecommitment, 8, 4)

fn fri_layer_zip_arr(fri_layers: [FriLayer; NUM_FRI_LAYERS], fri_layer_decommitments: [FriLayerDecommitment; NUM_FRI_LAYERS]) -> [(FriLayer, FriLayerDecommitment); NUM_FRI_LAYERS] {
#ifdef TESTING
    fri_layer_zip_arr_2(fri_layers, fri_layer_decommitments)
#else
    fri_layer_zip_arr_8(fri_layers, fri_layer_decommitments)
#endif // TESTING
}

/// Verify a single layer (multiple queries).
fn fri_verify_layer(fri_answers: [FriAnswer; NUM_FRI_QUERIES], fri_layer_decommitment: FriLayerDecommitment, context: FriLayerContext) -> FriLayerAccumulator {
    let data: [(FriAnswer, FriQueryDecommitment); NUM_FRI_QUERIES] = fri_layer_data_zip_arr(fri_answers, fri_layer_decommitment);
    let (res, _): ([FriAnswer; NUM_FRI_QUERIES], FriLayerContext) = fri_verify_query_map_arr(data, context);
    let (_, log_size_ex, _): FriLayerContext = context;
    let (_, log_size_ex): (bool, u8) = jet::subtract_8(log_size_ex, 1);
    (res, log_size_ex)
}

/// Verify inner layers.
fn fri_verify_layers(data: (FriLayer, FriLayerDecommitment), acc: FriLayerAccumulator) -> FriLayerAccumulator {
    let (fri_layer, fri_layer_decommitment): (FriLayer, FriLayerDecommitment) = data;
    let (fri_answers, log_size_ex): FriLayerAccumulator = acc;
    fri_verify_layer(fri_answers, fri_layer_decommitment, (fri_layer, log_size_ex, false))
}

// CONFIG: see NUM_FRI_LAYERS.
DEFINE_FOLD_ARR_1((FriLayer, FriLayerDecommitment), FriLayerAccumulator, fri_verify_layers)
DEFINE_FOLD_ARR((FriLayer, FriLayerDecommitment), FriLayerAccumulator, fri_verify_layers, 2, 1)
DEFINE_FOLD_ARR((FriLayer, FriLayerDecommitment), FriLayerAccumulator, fri_verify_layers, 4, 2)
DEFINE_FOLD_ARR((FriLayer, FriLayerDecommitment), FriLayerAccumulator, fri_verify_layers, 8, 4)

fn fri_verify_layers_fold_arr(data: [(FriLayer, FriLayerDecommitment); NUM_FRI_LAYERS], acc: FriLayerAccumulator) -> FriLayerAccumulator {
#ifdef TESTING
    fri_verify_layers_fold_arr_2(data, acc)
#else
    fri_verify_layers_fold_arr_8(data, acc)
#endif // TESTING
}

// CONFIG: see NUM_FRI_QUERIES.
DEFINE_FOLD_ARR_1(FriAnswer, QM31, fri_verify_last_layer)
DEFINE_FOLD_ARR(FriAnswer, QM31, fri_verify_last_layer, 2, 1)
DEFINE_FOLD_ARR(FriAnswer, QM31, fri_verify_last_layer, 4, 2)
DEFINE_FOLD_ARR(FriAnswer, QM31, fri_verify_last_layer, 8, 4)
DEFINE_FOLD_ARR(FriAnswer, QM31, fri_verify_last_layer, 16, 8)

fn fri_verify_last_layer_fold_arr(folded_answers: [FriAnswer; NUM_FRI_QUERIES], line_poly_coeff: QM31) -> QM31 {
#ifdef TESTING
    fri_verify_last_layer_fold_arr_2(folded_answers, line_poly_coeff)
#else
    fri_verify_last_layer_fold_arr_16(folded_answers, line_poly_coeff)
#endif // TESTING
}

/// Verify FRI decommitments.
fn fri_verify(fri_layers: FriLayers, fri_decommitments: FriDecommitments, fri_answers: [FriAnswer; NUM_FRI_QUERIES], log_size_ex: u8) {
    let (layers, line_poly_coeff): FriLayers = fri_layers;

    // Zip layer commitments with decommitments and verify the layers
    let layer_data: [(FriLayer, FriLayerDecommitment); NUM_FRI_LAYERS] = fri_layer_zip_arr(layers, fri_decommitments);
    let acc: FriLayerAccumulator = (fri_answers, log_size_ex);
    let acc: FriLayerAccumulator = fri_verify_layers_fold_arr(layer_data, acc);

    // Verify the last layer
    let (folded_answers, log_size_ex): FriLayerAccumulator = acc;
    assert!(jet::eq_8(log_size_ex, 0));
    let _: QM31 = fri_verify_last_layer_fold_arr(folded_answers, line_poly_coeff);
}

#endif
