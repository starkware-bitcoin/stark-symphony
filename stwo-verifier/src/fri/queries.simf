// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

//! FRI queries generating and folding.

#ifndef FRI_QUERIES_SIMF
#define FRI_QUERIES_SIMF

#include "config.simf"
#include "channel.simf"

/// Draw 8 queries from the channel state given the log domain mask.
fn channel_draw_queries_8(state: ChannelState, query_mask: u32) -> (ChannelState, U32x8) {
    // One hash digest gives 8 32-bit words, which we need to mask according to the domain log size
    let (state, (w0, w1, w2, w3, w4, w5, w6, w7)): (ChannelState, U32x8) = channel_draw_words(state);
    let q0: u32 = jet::and_32(w0, query_mask);
    let q1: u32 = jet::and_32(w1, query_mask);
    let q2: u32 = jet::and_32(w2, query_mask);
    let q3: u32 = jet::and_32(w3, query_mask);
    let q4: u32 = jet::and_32(w4, query_mask);
    let q5: u32 = jet::and_32(w5, query_mask);
    let q6: u32 = jet::and_32(w6, query_mask);
    let q7: u32 = jet::and_32(w7, query_mask);
    (state, (q0, q1, q2, q3, q4, q5, q6, q7))
}

/// Generate FRI queries from the channel state given the log domain mask.
fn fri_generate_queries(state: ChannelState, log_size: u8) -> (ChannelState, [u32; NUM_FRI_QUERIES]) {
    let (_, query_mask): (bool, u32) = jet::subtract_32(jet::left_shift_32(log_size, 1), 1);
    let (state, (q0, q1, q2, q3, q4, q5, q6, q7)): (ChannelState, U32x8) = channel_draw_queries_8(state, query_mask);

#ifdef TESTING
    let queries: [u32; NUM_FRI_QUERIES] = dbg!([q0, q1]);
#else
    let (state, (q8, q9, q10, q11, q12, q13, q14, q15)): (ChannelState, U32x8) = channel_draw_queries_8(state, query_mask);
    // CONFIG: see NUM_FRI_QUERIES
    let queries: [u32; NUM_FRI_QUERIES] = [q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15];
#endif // TESTING

    // NOTE: we do not sort and remove duplicates here, to simplify the implementation.
    (state, queries)
}

#ifdef TESTING

fn test_channel_draw_queries_8() {
    let state: ChannelState = (0x733dfccec28657e75a61a34954fa6d0c8915e3adbcf40c765b4eaa488db84902, 0);
    let query_mask: u32 = 63; // 2^6 - 1
    let (state, (q0, q1, q2, q3, q4, q5, q6, q7)): (ChannelState, U32x8) = channel_draw_queries_8(state, query_mask);
    assert!(jet::eq_32(q0, 45));
    assert!(jet::eq_32(q1, 54));
    assert!(jet::eq_32(q2, 34));
    assert!(jet::eq_32(q3, 10));
    assert!(jet::eq_32(q4, 13));
    assert!(jet::eq_32(q5, 7));
    assert!(jet::eq_32(q6, 12));
    assert!(jet::eq_32(q7, 47));
}

#endif // TESTING

#endif
