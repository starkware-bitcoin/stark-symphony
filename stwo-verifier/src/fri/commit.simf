// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

#ifndef FRI_COMMIT_SIMF
#define FRI_COMMIT_SIMF

#include "config.simf"
#include "channel.simf"
#include "hasher.simf"
#include "fields/qm31.simf"

/// FRI layer (first and inner)
/// * commitment
/// * folding alpha
/// * domain size
type FriLayer = (u256, QM31, u32);

/// Line polynomial coefficients in Circle FFT basis.
type LinePoly = List<QM31, MAX_LINE_POLY_DEGREE>;

/// FRI layers:
/// * first layer
/// * inner layers (up to MAX_FRI_LAYERS - 1)
/// * last layer (line polynomial coefficients)
type FriLayers = (FriLayer, List<FriLayer, MAX_FRI_LAYERS>, LinePoly);

/// Reads the FRI layer commitment and samples a random coefficient.
/// Fails if the computed FRI layer evaluation does not match the pre-sampled FRI layer evaluation.
fn fri_layer_commit(layer: FriLayer, state: ChannelState) -> ChannelState {
    let (commitment, folding_alpha, _): FriLayer = layer;

    /// Mix the commitment into the state.
    let state: ChannelState = channel_mix_u256(state, commitment);

    /// Draw folding alpha from the state and compare it to the predefined one (we cannot mutate layers, hence the trick).
    let (state, random_coeff): (ChannelState, QM31) = channel_draw_qm31(state);
    assert!(qm31_eq(random_coeff, folding_alpha));

    state
}

/// Mix line polynomial coefficients into the channel state.
fn channel_mix_line_poly(state: ChannelState, line_poly: LinePoly) -> ChannelState {
    let (digest, _): ChannelState = state;
    let ctx: Ctx8 = jet::sha_256_ctx_8_init();
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, digest);
    // Mix coefficients as list of QM31 values
    let ctx: Ctx8 = fold::<hasher_add_qm31, MAX_LINE_POLY_DEGREE>(line_poly, ctx);
    let res: u256 = jet::sha_256_ctx_8_finalize(ctx);
    // Reset the num_sent counter
    (res, 0)
}

/// Commits the FRI layers.
fn fri_commit(state: ChannelState, fri_layers: FriLayers) -> ChannelState {
    let (first_layer, inner_layers, last_layer): FriLayers = fri_layers;

    // Commit first layer
    let state: ChannelState = fri_layer_commit(first_layer, state);

    // Commit inner layers
    let state: ChannelState = fold::<fri_layer_commit, MAX_FRI_LAYERS>(inner_layers, state);

    // Commit last layer (line polynomial coefficients)
    let state: ChannelState = channel_mix_line_poly(state, last_layer);

    state
}

fn test_fri_commit() {
    let state: ChannelState = (0x44dff4effae0be493c21672683c892b3baeaa7d251e5e7153bc0e0b2da8a9d96, 0);
    let fri_layers: FriLayers = (
        (
            0x768a89291d8db4be401f5545f1cc7f25a1b00753773a4b3789592badc33ecf3f,
            qm31(299390734, 1867715474, 641071780, 899293580),
            0,
        ),
        list![
            (
                0x3f2a2cb1b0384b1ddd57c16bb40b67a0b011c1449606196e959fdbff885a0280,
                qm31(583239428, 1592475587, 965337744, 958858330),
                0,
            ),
            (
                0xb03eededd1682fcab8c82d0d284ccf0f8ddc7d003708ecd12323adfd843f0f5f,
                qm31(1189491500, 1891637816, 1649264578, 1592434953),
                0,
            ),
        ],
        list![
            qm31(1462473176, 2065988908, 1080482792, 1497677558),
        ],
    );
    let (digest, _): ChannelState = fri_commit(state, fri_layers);
    assert!(jet::eq_256(digest, 0xa906adfe1ac2b7cf283ae8a11e16a1c4c44834f259056eacd36d14044761266c));
}

#endif
