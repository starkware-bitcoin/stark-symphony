// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

#ifndef WIDE_FIBONACCI_H
#define WIDE_FIBONACCI_H

#include "config.simf"
#include "fields/qm31.simf"
#include "groups/qm31_point.simf"
#include "evals/trace_poly.simf"
#include "evals/composition_poly.simf"
#include "macros/array_fold.simf"

/// The accumulator for the evaluation of the composition polynomial.
/// * contraint accumulator
/// * a (base_trace[i - 2])
/// * b (base_trace[i - 1])
/// * random coefficient
/// * skip_2 (counter which stops at 2)
type EvalAcc = (QM31, QM31, QM31, QM31, u8);

/// The folding function for the evaluation of the composition polynomial.
fn eval_column(col_evals: ColEvalsQM31, acc: EvalAcc) -> EvalAcc {
    let (constraint_acc, a, b, random_coeff, skip_2): EvalAcc = acc;
    let c: QM31 = col_evals_qm31_get(col_evals, 0);
    match jet::eq_8(skip_2, 2) {
        true => {
            let constraint: QM31 = qm31_sub(c, qm31_add(qm31_pow2(b), qm31_pow2(a)));
            let constraint_acc_next: QM31 = qm31_add(qm31_mul(constraint_acc, random_coeff), constraint);
            (constraint_acc_next, b, c, random_coeff, skip_2)
        },
        false => {
            let (_, skip_2_next): (bool, u8) = jet::add_8(skip_2, 1);
            (constraint_acc, b, c, random_coeff, skip_2_next)
        }
    }
}

// CONFIG: define the macro for the current NUM_COLUMNS.
DEFINE_FOLD_ARR_1(ColEvalsQM31, EvalAcc, eval_column)
DEFINE_FOLD_ARR(ColEvalsQM31, EvalAcc, eval_column, 2, 1)
DEFINE_FOLD_ARR(ColEvalsQM31, EvalAcc, eval_column, 4, 2)
DEFINE_FOLD_ARR(ColEvalsQM31, EvalAcc, eval_column, 8, 4)
DEFINE_FOLD_ARR(ColEvalsQM31, EvalAcc, eval_column, 16, 8)
DEFINE_FOLD_ARR(ColEvalsQM31, EvalAcc, eval_column, 32, 16)

/// Evaluates the composition polynomial at OODS point.
///
/// # Arguments
///
/// * `log_size`: The log of the column size (all columns have the same size).
/// * `point`: The OODS point to evaluate the polynomial at.
/// * `oods_trace_evals`: Trace evaluations at the OODS point.
/// * `random_coeff`: The random coefficient.
fn eval_composition_poly(log_size: u8, oods_point: QM31Point, oods_trace_evals: TraceEvalsQM31, random_coeff: QM31) -> QM31 {
    let acc: EvalAcc = (qm31_zero(), qm31_zero(), qm31_zero(), random_coeff, 0);
    // CONFIG: define the macro for the current NUM_COLUMNS.
    let (constraint_acc, _, _, _, _): EvalAcc = eval_column_fold_arr_4(oods_trace_evals, acc);
    let vanish_poly_eval: QM31 = vanishing_poly_eval(log_size, oods_point);
    qm31_div(constraint_acc, vanish_poly_eval)
}

fn test_eval_composition_poly() {
    let log_size: u8 = 2;
    let oods_point: QM31Point = (
        qm31(853359656, 1678958373, 358478267, 760744889),
        qm31(23994856, 240802263, 189516568, 1941571865)
    );
    let oods_trace_evals: TraceEvalsQM31 = [
        [qm31(1, 0, 0, 0)],
        [qm31(219216441, 1999484797, 865948224, 1842303184)],
        [qm31(88796111, 196217285, 1337974825, 1079249662)],
        [qm31(1039952504, 987562643, 1687835115, 1083917527)],
    ];
    let random_coeff: QM31 = qm31(2012724549, 1128459570, 1584582850, 1454574268);
    let result: QM31 = eval_composition_poly(log_size, oods_point, oods_trace_evals, random_coeff);
    let expected: QM31 = qm31(634949303, 1333531166, 715684036, 225686437);
    assert!(qm31_eq(result, expected));
}

#endif
