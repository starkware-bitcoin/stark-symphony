// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

//! A non-interactive channel for communication between the prover and the verifier.
//! The channel is based on the SHA-256 hash function.

#ifndef CHANNEL_STATE_SIMF
#define CHANNEL_STATE_SIMF

#include "fields/m31.simf"
#include "fields/qm31.simf"
#include "groups/qm31_point.simf"
#include "channel/helpers.simf"
#include "poly/evaluations.simf"
#include "poly/line.simf"

/// The channel state consists of:
/// - "so-far" digest 256-bit value, initialized to 0.
/// - 32-bit counter for the number of drawing attempts per current state (aka num_sent).
type ChannelState = (u256, u32);

/// Draw a 256-bit value from the channel state and increment the num_sent counter.
fn channel_draw_u256(state: ChannelState) -> (ChannelState, u256) {
    let (digest, num_sent): ChannelState = state;
    let ctx: Ctx8 = jet::sha_256_ctx_8_init();
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, digest);
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_4(ctx, num_sent);
    let res: u256 = jet::sha_256_ctx_8_finalize(ctx);
    let (_, num_sent): (bool, u32) = jet::add_32(num_sent, 1);
    ((digest, num_sent), res)
}

/// Draw 8 big endian 32-bit words from the channel state and increment the num_sent counter.
fn channel_draw_words(state: ChannelState) -> (ChannelState, U32x8) {
    let (state, value): (ChannelState, u256) = channel_draw_u256(state);
    (state, split_256(value))
}

/// Draw 8 base field elements (M31) from the channel uniformly at random.
/// Returns the state and the 8 base field elements if they are uniformly distributed.
/// Otherwise, returns the state unchanged.
fn draw_base_felts_iter_8(state: ChannelState, context: (), counter: u8) -> Either<(ChannelState, M31x8), ChannelState> {
    let (state, (a, b, c, d, e, f, g, h)): (ChannelState, U32x8) = channel_draw_words(state);
    match is_uniform_8(a, b, c, d, e, f, g, h) {
        true => Left((state, (m31(a), m31(b), m31(c), m31(d), m31(e), m31(f), m31(g), m31(h)))),
        false => Right(state),
    }
}

/// Draw 4 base field elements (M31) from the channel uniformly at random.
/// Returns the state and the 4 base field elements if they are uniformly distributed.
/// Otherwise, returns the state unchanged.
fn draw_base_felts_iter_4(state: ChannelState, context: (), counter: u8) -> Either<(ChannelState, M31x4), ChannelState> {
    let (state, (a, b, c, d, _, _, _, _)): (ChannelState, U32x8) = channel_draw_words(state);
    match is_uniform_4(a, b, c, d) {
        true => Left((state, (m31(a), m31(b), m31(c), m31(d)))),
        false => Right(state),
    }
}

/// Draw 8 base field elements (M31) from the channel uniformly at random.
fn channel_draw_m31x8(state: ChannelState) -> (ChannelState, M31x8) {
    let res: Either<(ChannelState, M31x8), ChannelState> = for_while::<draw_base_felts_iter_8>(state, ());
    let (state, values): (ChannelState, M31x8) = unwrap_left::<ChannelState>(res);
    (state, values)
}

/// Draw 4 base field elements (M31) from the channel uniformly at random.
fn channel_draw_m31x4(state: ChannelState) -> (ChannelState, M31x4) {
    let res: Either<(ChannelState, M31x4), ChannelState> = for_while::<draw_base_felts_iter_4>(state, ());
    let (state, values): (ChannelState, M31x4) = unwrap_left::<ChannelState>(res);
    (state, values)
}
/// Draw a QM31 value from the channel state.
fn channel_draw_qm31(state: ChannelState) -> (ChannelState, QM31) {
    let (state, (a, b, c, d)): (ChannelState, M31x4) = channel_draw_m31x4(state);
    (state, qm31(a, b, c, d))
}

/// Draw a QM31 point from the channel state.
fn channel_draw_qm31_point(state: ChannelState) -> (ChannelState, QM31Point) {
    let (state, t): (ChannelState, QM31) = channel_draw_qm31(state);
    let t_sq: QM31 = qm31_pow2(t);
    let t_sq_plus_1_inv: QM31 = qm31_inv(qm31_add(qm31_one(), t_sq));
    let x: QM31 = qm31_mul(qm31_sub(qm31_one(), t_sq), t_sq_plus_1_inv);
    let y: QM31 = qm31_mul(qm31_add(t, t), t_sq_plus_1_inv);
    (state, (x, y))
}

/// Mix a 256-bit big endian value into the channel state.
fn channel_mix_u256(state: ChannelState, input: u256) -> ChannelState {
    let (digest, _): ChannelState = state;
    let ctx: Ctx8 = jet::sha_256_ctx_8_init();
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, digest);
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, input);
    let res: u256 = jet::sha_256_ctx_8_finalize(ctx);
    // Reset the num_sent counter
    (res, 0)
}

/// Mix a u64 big endian value into the channel state.
fn channel_mix_u64(state: ChannelState, input: u64) -> ChannelState {
    let (digest, _): ChannelState = state;
    let ctx: Ctx8 = jet::sha_256_ctx_8_init();
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, digest);
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_8(ctx, input);
    let res: u256 = jet::sha_256_ctx_8_finalize(ctx);
    // Reset the num_sent counter
    (res, 0)
}

/// Add a QM31 value to the hasher, coordinate by coordinate, 4 bytes (big endian) at a time.
fn hasher_add_qm31(value: QM31, ctx: Ctx8) -> Ctx8 {
    let ((a, b), (c, d)): QM31 = dbg!(value);
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_4(ctx, a);
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_4(ctx, b);
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_4(ctx, c);
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_4(ctx, d);
    ctx
}

/// Add a list of QM31 column evaluations to the hasher.
fn hasher_add_qm31_column(col_evals: ColEvalsQM31, ctx: Ctx8) -> Ctx8 {
    fold::<hasher_add_qm31, COL_MAX_OFFSET>(col_evals, ctx)
}

/// Mix a list of QM31 values into the channel state.
fn channel_mix_oods_evals(state: ChannelState, oods_evals: OodsEvals) -> ChannelState {
    let (digest, _): ChannelState = state;
    let ctx: Ctx8 = jet::sha_256_ctx_8_init();
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, digest);

    // Mix sampled values
    let (oods_trace_evals, oods_cp_eval): OodsEvals = oods_evals;
    let ctx: Ctx8 = fold::<hasher_add_qm31_column, MAX_COLUMNS>(oods_trace_evals, ctx);

    // Mix CP decomposed partitioned evaluation
    let cp_eval_list: List<QM31, 32> = <(Option<CPEvalQM31>, List<QM31, 16>)>::into((Some(oods_cp_eval), list![]));
    let ctx: Ctx8 = fold::<hasher_add_qm31, 32>(cp_eval_list, ctx);

    let res: u256 = jet::sha_256_ctx_8_finalize(ctx);
    // Reset the num_sent counter
    (res, 0)
}

/// Mix line polynomial coefficients into the channel state.
fn channel_mix_line_poly(state: ChannelState, line_poly: LinePoly) -> ChannelState {
    let (digest, _): ChannelState = state;
    let ctx: Ctx8 = jet::sha_256_ctx_8_init();
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, digest);
    // Mix coefficients as list of QM31 values
    let ctx: Ctx8 = fold::<hasher_add_qm31, MAX_LINE_POLY_DEGREE>(line_poly, ctx);
    let res: u256 = jet::sha_256_ctx_8_finalize(ctx);
    // Reset the num_sent counter
    (res, 0)
}

fn test_channel_draw_qm31() {
    let state: ChannelState = (0, 0);
    let first_random_felt: QM31 = qm31(1840668629, 533944055, 1922121815, 459001195);
    let second_random_felt: QM31 = qm31(559458448, 1834888235, 1610726090, 1135320235);

    let (state, value): (ChannelState, QM31) = channel_draw_qm31(state);
    assert!(qm31_eq(value, first_random_felt));

    let (state, value): (ChannelState, QM31) = channel_draw_qm31(state);
    assert!(qm31_eq(value, second_random_felt));
}

fn test_channel_draw_qm31_point() {
    let state: ChannelState = (0, 0);
    let (state, value): (ChannelState, QM31Point) = channel_draw_qm31_point(state);
    let x: QM31 = qm31(877266510, 837585062, 67369234, 641637369);
    let y: QM31 = qm31(1140140443, 711987229, 851311779, 496972972);
    assert!(qm31_point_eq(value, (x, y)));
}

fn test_channel_mix_oods_evals() {
    let state: ChannelState = (0xf4101066b0addfbccce964d958b1dec28fcf4e2a9a280f15b8dfcb4176b65c99, 0);
    let oods_trace_evals: TraceEvalsQM31 = list![
        list![qm31(1, 0, 0, 0)],
        list![qm31(1317558333, 30282626, 1003338644, 805043598)],
        list![qm31(962074990, 170174207, 1792910003, 764280909)],
        list![qm31(1150846786, 1548284776, 259211664, 74473918)],
    ];
    let oods_cp_eval: CPEvalQM31 = [
        qm31(1454521826, 1225905306, 1400157099, 1190844098),
        qm31(1028648943, 0, 0, 0),
        qm31(2147287039, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(1077048838, 1065010352, 1218756193, 72961446),
        qm31(1832027781, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(1384617206, 1935540515, 73491668, 934779802),
        qm31(1354939621, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(1615962367, 320491381, 618401992, 1994125905),
        qm31(180137318, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(0, 0, 0, 0),
    ];
    let expected: u256 = 0x7a974a58d6ebe09baa1373d9eda65b443a427796a4befe155a944ce9f9effbfd;

    let (digest, _): ChannelState = channel_mix_oods_evals(state, (oods_trace_evals, oods_cp_eval));
    assert!(jet::eq_256(digest, expected));
}

#endif
