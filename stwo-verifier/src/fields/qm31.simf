// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

//! 4th extension of M31 field

#ifndef QM31_SIMF
#define QM31_SIMF

#include "fields/m31.simf"
#include "fields/cm31.simf"

/// Size of the field extension
#define QM31_P 21267647892944572736998860269687930881  // (2^31 - 1)^4

/// QM31 element represented as (a, b, c, d) or `a + bi + (c + di)j`
type QM31 = (CM31, CM31);

/// Construct a QM31 element from four M31 elements.
fn qm31(a: M31, b: M31, c: M31, d: M31) -> QM31 {
    ((a, b), (c, d))
}

/// Construct a zero QM31 element.
fn qm31_zero() -> QM31 {
    (cm31_zero(), cm31_zero())
}

/// Construct a one QM31 element.
fn qm31_one() -> QM31 {
    (cm31_one(), cm31_zero())
}

/// Add two QM31 elements.
fn qm31_add(a: QM31, b: QM31) -> QM31 {
    let (ar, ai): (CM31, CM31) = a;
    let (br, bi): (CM31, CM31) = b;
    (cm31_add(ar, br), cm31_add(ai, bi))
}

/// Negate a QM31 element.
fn qm31_neg(a: QM31) -> QM31 {
    let (ar, ai): (CM31, CM31) = a;
    (cm31_neg(ar), cm31_neg(ai))
}

/// Subtract two QM31 elements.
fn qm31_sub(a: QM31, b: QM31) -> QM31 {
    let (ar, ai): (CM31, CM31) = a;
    let (br, bi): (CM31, CM31) = b;
    (cm31_sub(ar, br), cm31_sub(ai, bi))
}

/// Multiply a QM31 element by a M31 element.
fn qm31_mul_m31(a: QM31, b: M31) -> QM31 {
    let (ar, ai): (CM31, CM31) = a;
    (cm31_mul_m31(ar, b), cm31_mul_m31(ai, b))
}

/// Multiply a QM31 element by a CM31 element.
fn qm31_mul_cm31(a: QM31, b: CM31) -> QM31 {
    let (ar, ai): (CM31, CM31) = a;
    (cm31_mul(ar, b), cm31_mul(ai, b))
}

/// Get a complex conjugate of a QM31 element.
fn qm31_conj(a: QM31) -> QM31 {
    let (ar, ai): (CM31, CM31) = a;
    (ar, cm31_neg(ai))
}

/// Multiply two QM31 elements.
fn qm31_mul(a: QM31, b: QM31) -> QM31 {
    let (ar, ai): (CM31, CM31) = a;
    let (br, bi): (CM31, CM31) = b;
    let re: CM31 = cm31_add(cm31_mul(ar, br), cm31_mul(cm31_mul(ai, bi), (2, 1)));
    let im: CM31 = cm31_add(cm31_mul(ar, bi), cm31_mul(ai, br));
    (re, im)
}

/// Square a QM31 element.
fn qm31_pow2(a: QM31) -> QM31 {
    qm31_mul(a, a)
}

/// Invert a QM31 element.
fn qm31_inv(a: QM31) -> QM31 {
    let (ar, ai): (CM31, CM31) = a;
    let ar_sq: CM31 = cm31_mul(ar, ar);
    let ai_sq: CM31 = cm31_mul(ai, ai);
    let ai_sq_dbl: CM31 = cm31_add(ai_sq, ai_sq);
    let (ai_sqr, ai_sqi): (M31, M31) = ai_sq;
    let ai_sq_rev: CM31 = (m31_neg(ai_sqi), ai_sqr);
    let den: CM31 = cm31_add(ar_sq, cm31_neg(cm31_add(ai_sq_dbl, ai_sq_rev)));
    let den_inv: CM31 = cm31_inv(den);
    (cm31_mul(ar, den_inv), cm31_mul(cm31_neg(ai), den_inv))
}

/// Divide two QM31 elements.
fn qm31_div(a: QM31, b: QM31) -> QM31 {
    let b_inv: QM31 = qm31_inv(b);
    qm31_mul(a, b_inv)
}

/// Construct a QM31 element from a CM31 element.
fn qm31_from_cm31(a: CM31) -> QM31 {
    (a, cm31_zero())
}

/// Construct a QM31 element from a M31 element.
fn qm31_from_m31(a: M31) -> QM31 {
    (cm31_from_m31(a), cm31_zero())
}

/// Check if two QM31 elements are equal.
fn qm31_eq(a: QM31, b: QM31) -> bool {
    let (ar, ai): (CM31, CM31) = a;
    let (br, bi): (CM31, CM31) = b;
    match cm31_eq(ar, br) {
        true => cm31_eq(ai, bi),
        false => false,
    }
}

/// Unwrap a QM31 element from an Option.
/// If the element is None, the function will panic.
fn qm31_unwrap(x: Option<QM31>) -> QM31 {
    match x {
        Some(x: QM31) => x,
        None => panic!(),
    }
}

#ifdef TESTING

fn test_qm31_inv() {
    let a: QM31 = qm31(1, 2, 3, 4);
    let a_inv: QM31 = qm31_inv(a);
    let b: QM31 = qm31_mul(a, a_inv);
    assert!(qm31_eq(b, qm31_one()));
}

fn test_qm31_add() {
    let a: QM31 = qm31(1, 2, 3, 4);
    let b: QM31 = qm31(4, 5, 6, 7);
    let c: QM31 = qm31_add(a, b);
    assert!(qm31_eq(c, qm31(5, 7, 9, 11)));
}

fn test_qm31_sub() {
    let a: QM31 = qm31(1, 2, 3, 4);
    let b: QM31 = qm31(4, 5, 6, 7);
    let c: QM31 = qm31_sub(a, b);
    assert!(qm31_eq(c, qm31(2147483644, 2147483644, 2147483644, 2147483644)));
}

fn test_qm31_mul_m31() {
    let a: QM31 = qm31(1, 2, 3, 4);
    let b: M31 = 8;
    let c: QM31 = qm31_mul_m31(a, b);
    assert!(qm31_eq(c, qm31(8, 16, 24, 32)));
}

fn test_qm31_mul_cm31() {
    let a: QM31 = qm31(1, 2, 3, 4);
    let b: CM31 = (8, 16);
    let c: QM31 = qm31(8, 16, 0, 0);
    let actual: QM31 = qm31_mul_cm31(a, b);
    let expected: QM31 = qm31_mul(a, c);
    assert!(qm31_eq(actual, expected));
}

fn test_qm31_mul() {
    let a: QM31 = qm31(1, 2, 3, 4);
    let b: QM31 = qm31(4, 5, 6, 7);
    let c: QM31 = qm31_mul(a, b);
    let (cr, ci): (CM31, CM31) = c;
    assert!(qm31_eq(c, qm31(2147483576, 93, 2147483631, 50)));
}

#endif // TESTING

#endif
