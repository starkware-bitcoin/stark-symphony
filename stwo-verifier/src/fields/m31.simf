// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

//! M31 field implementation

#ifndef M31_SIMF
#define M31_SIMF

#define M31_MODULUS 2147483647  // 2^31 - 1

type M31 = u32;

/// Reduce a u32 value modulo M31.
/// Modulo jet is cheaper than the bitwise version:
/// (a & 0x7f) + (a >> 31)
fn m31(val: u32) -> M31 {
    jet::modulo_32(val, M31_MODULUS)
}

/// Add two elements modulo M31.
fn m31_add(a: M31, b: M31) -> M31 {
    // Note that the sum of two 31-bit integers fits in u32
    let (_, sum): (bool, u32) = jet::add_32(a, b);
    m31(sum)
}

/// Negate a field element modulo M31.
fn m31_neg(a: M31) -> M31 {
    let (_, res): (bool, u32) = jet::subtract_32(M31_MODULUS, a);
    res
}

/// Subtract two elements modulo M31.
fn m31_sub(a: M31, b: M31) -> M31 {
    m31_add(a, m31_neg(b))
}

/// Multiply two elements modulo M31.
fn m31_mul(a: M31, b: M31) -> M31 {
    let mul: u64 = jet::multiply_32(a, b);
    let res64: u64 = jet::modulo_64(mul, M31_MODULUS);
    let (_, res): (u32, u32) = <u64>::into(res64);
    res
}

/// Accumulator for the modular exponentiation operation.
///
/// The accumulator is a tuple of three elements:
/// - The result of the modular exponentiation operation.
/// - The base of the modular exponentiation operation.
/// - The exponent of the modular exponentiation operation.
type ExpModAcc = (u32, u32, u32);

/// Implementation of the iterative square and multiply algorithm.
/// Note: context and counter are not used in this implementation,
/// for more details see: https://github.com/BlockstreamResearch/simfony/blob/a522ee4fb271a8c5c9516dabf50b335a540042cd/src/compile.rs#L497
fn m31_exp_step(acc: ExpModAcc, context: (), counter: u16) -> Either<u32, ExpModAcc> {
    let (res, base, exp): ExpModAcc = acc;
    match jet::is_zero_32(exp) {
        true => Left(res),
        false => {
            let new_res: u32 = match jet::divides_32(2, exp) {
                true => res,
                false => m31_mul(res, base),
            };
            let new_base: u32 = m31_mul(base, base);
            let new_exp: u32 = jet::divide_32(exp, 2);
            Right((new_res, new_base, new_exp))
        }
    }
}

/// Raise a field element to a power modulo M31.
fn m31_exp(a: M31, b: M31) -> M31 {
    let res: Either<u32, ExpModAcc> = for_while::<m31_exp_step>((1, a, b), ());
    unwrap_left::<ExpModAcc>(res)
}

/// Square a field element modulo M31.
fn m31_pow2(a: M31) -> M31 {
    m31_mul(a, a)
}

/// Raise a field element to the 4th power modulo M31.
fn m31_pow4(a: M31) -> M31 {
    m31_pow2(m31_pow2(a))
}

/// Raise a field element to the 8th power modulo M31.
fn m31_pow8(a: M31) -> M31 {
    m31_pow2(m31_pow4(a))
}

/// Raise a field element to the 16th power modulo M31.
fn m31_pow16(a: M31) -> M31 {
    m31_pow4(m31_pow4(a))
}

/// Check if two field elements are equal modulo M31.
fn m31_eq(a: M31, b: M31) -> bool {
    jet::eq_32(a, b)
}

/// Unwrap a M31 element from an Option.
/// If the element is None, the function will panic.
fn m31_unwrap(x: Option<M31>) -> M31 {
    match x {
        Some(x: M31) => x,
        None => panic!(),
    }
}

/// Invert a field element modulo M31.
/// More specifically compute `v^((2^31-1)-2) = v^2147483645` (which is cheaper than euclidian division)
/// See https://github.com/mmcloughlin/addchain for more details
fn m31_inv(a: M31) -> M31 {
    match jet::is_zero_32(a) {
        true => {
            assert!(false);
            0
        },
        false => {
            let t0: M31 = m31_mul(m31_pow4(a), a); // a^5
            let t1: M31 = m31_mul(m31_pow2(t0), t0); // a^15
            let t2: M31 = m31_mul(m31_pow8(t1), t0); // a^125
            let t3: M31 = m31_mul(m31_pow2(t2), t0); // a^255
            let t4: M31 = m31_mul(m31_pow16(m31_pow16(t3)), t3); // a^65535
            let t5: M31 = m31_mul(m31_pow16(m31_pow16(t4)), t3); // a^16777215
            m31_mul(m31_pow16(m31_pow8(t5)), t2) // a^2147483645
        },
    }
}

/// Divide two field elements modulo M31.
fn m31_div(a: M31, b: M31) -> M31 {
    m31_mul(a, m31_inv(b))
}

#ifdef TESTING

fn test_m31_inv() {
    let a: M31 = 35;
    let a_inv: M31 = m31_inv(a);
    let a_inv_expected: M31 = m31_exp(a, 2147483645);
    assert!(m31_eq(a_inv, a_inv_expected));
}

fn test_m31_add() {
    let a: M31 = 2147483646;
    let b: M31 = 1;
    let c: M31 = m31_add(a, b);
    assert!(m31_eq(c, 0));
}

fn test_m31_sub() {
    let a: M31 = 0;
    let b: M31 = 1;
    let c: M31 = m31_sub(a, b);
    assert!(m31_eq(c, 2147483646));
}

#endif // TESTING

#endif
