// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

//! Complex extension of M31 field
//! Equivalent to M31\[x\] over (x^2 + 1) as the irreducible polynomial.

#ifndef CM31_SIMF
#define CM31_SIMF

#include "fields/m31.simf"

/// Size of the field extension
#define CM31_P 4611686014132420609  // (2^31 - 1)^2

/// CM31 element represented as (a, b) of a + bi.
type CM31 = (M31, M31);

/// Construct a zero CM31 element.
fn cm31_zero() -> CM31 {
    (0, 0)
}

/// Construct a one CM31 element.
fn cm31_one() -> CM31 {
    (1, 0)
}

/// Add two CM31 elements.
fn cm31_add(a: CM31, b: CM31) -> CM31 {
    let (ar, ai): (M31, M31) = a;
    let (br, bi): (M31, M31) = b;
    (m31_add(ar, br), m31_add(ai, bi))
}

/// Negate a CM31 element.
fn cm31_neg(a: CM31) -> CM31 {
    let (ar, ai): (M31, M31) = a;
    (m31_neg(ar), m31_neg(ai))
}

/// Subtract two CM31 elements.
fn cm31_sub(a: CM31, b: CM31) -> CM31 {
    let (ar, ai): (M31, M31) = a;
    let (br, bi): (M31, M31) = b;
    (m31_sub(ar, br), m31_sub(ai, bi))
}

/// Subtract a CM31 element from a M31 element.
fn cm31_sub_m31(a: CM31, b: M31) -> CM31 {
    let (ar, ai): (M31, M31) = a;
    (m31_sub(ar, b), ai)
}

/// Multiply a CM31 element by a M31 element.
fn cm31_mul_m31(a: CM31, b: M31) -> CM31 {
    let (ar, ai): (M31, M31) = a;
    (m31_mul(ar, b), m31_mul(ai, b))
}

/// Divide a CM31 element by a M31 element.
fn cm31_div_m31(a: CM31, b: M31) -> CM31 {
    let b_inv: M31 = m31_inv(b);
    cm31_mul_m31(a, b_inv)
}

/// Convert a M31 element to a CM31 element.
fn cm31_from_m31(a: M31) -> CM31 {
    (a, 0)
}

/// CM31 complex conjugate.
fn cm31_conj(a: CM31) -> CM31 {
    let (ar, ai): (M31, M31) = a;
    (ar, m31_neg(ai))
}

/// Multiply two CM31 elements.
fn cm31_mul(a: CM31, b: CM31) -> CM31 {
    let (ar, ai): (M31, M31) = a;
    let (br, bi): (M31, M31) = b;
    let re: M31 = m31_sub(m31_mul(ar, br), m31_mul(ai, bi));
    let im: M31 = m31_add(m31_mul(ar, bi), m31_mul(ai, br));
    (re, im)
}

/// Invert a CM31 element.
fn cm31_inv(a: CM31) -> CM31 {
    let (ar, ai): (M31, M31) = a;
    let a_conj: CM31 = cm31_conj(a);
    let a_norm: M31 = m31_add(m31_pow2(ar), m31_pow2(ai));
    cm31_div_m31(a_conj, a_norm)
}

/// Divide two CM31 elements.
fn cm31_div(a: CM31, b: CM31) -> CM31 {
    let b_inv: CM31 = cm31_inv(b);
    cm31_mul(a, b_inv)
}

/// Double a CM31 element.
fn cm31_dbl(a: CM31) -> CM31 {
    cm31_add(a, a)
}

/// Check if two CM31 elements are equal.
fn cm31_eq(a: CM31, b: CM31) -> bool {
    let (ar, ai): (M31, M31) = a;
    let (br, bi): (M31, M31) = b;
    match jet::eq_32(ar, br) {
        true => jet::eq_32(ai, bi),
        false => false,
    }
}

#ifdef TESTING

fn test_cm31_add() {
    let a: CM31 = (1, 2);
    let b: CM31 = (3, 4);
    let c: CM31 = cm31_add(a, b);
    assert!(cm31_eq(c, (4, 6)));
}

fn test_cm31_sub() {
    let a: CM31 = (1, 2);
    let b: CM31 = (4, 5);
    let c: CM31 = cm31_sub(a, b);
    assert!(cm31_eq(c, (2147483644, 2147483644)));
}

fn test_cm31_mul() {
    let a: CM31 = (1, 2);
    let b: CM31 = (5, 6);
    let c: CM31 = cm31_mul(a, b);
    assert!(cm31_eq(c, (2147483640, 16)));
}

fn test_cm31_mul_2() {
    let a: CM31 = (3, 4);
    let b: CM31 = (7, 8);
    let c: CM31 = (2, 1);
    let d: CM31 = cm31_mul(cm31_mul(a, b), c);
    assert!(cm31_eq(d, (2147483573, 93)));
}

fn test_cm31_div() {
    let a: CM31 = (2147483641, 13);
    let b: CM31 = (4, 5);
    let c: CM31 = cm31_div(a, b);
    assert!(cm31_eq(c, (1, 2)));
}

fn test_cm31_inv() {
    let cm: CM31 = (1, 2);
    let cm_inv: CM31 = cm31_inv(cm);
    let o: CM31 = cm31_mul(cm, cm_inv);
    assert!(cm31_eq(o, (1, 0)));
}

#endif // TESTING

#endif
