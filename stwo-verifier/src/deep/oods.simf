// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

#ifndef DEEP_OODS_SIMF
#define DEEP_OODS_SIMF

#include "config.simf"
#include "channel.simf"
#include "hasher.simf"
#include "fields/qm31.simf"
#include "groups/qm31_point.simf"
#include "evals/trace_poly.simf"
#include "evals/composition_poly.simf"

/// Trace evaluations and composition polynomial evaluation at OODS point
type OodsEvals = (TraceEvalsQM31, CPEvalQM31);

/// Mix a list of QM31 values into the channel state.
fn channel_mix_oods_evals(state: ChannelState, oods_evals: OodsEvals) -> ChannelState {
    let (digest, _): ChannelState = state;
    let ctx: Ctx8 = jet::sha_256_ctx_8_init();
    let ctx: Ctx8 = jet::sha_256_ctx_8_add_32(ctx, digest);

    // Mix sampled values
    let (oods_trace_evals, oods_cp_eval): OodsEvals = oods_evals;
    let ctx: Ctx8 = fold::<hasher_add_qm31_column, MAX_COLUMNS>(oods_trace_evals, ctx);

    // Mix CP decomposed partitioned evaluation
    let cp_eval_list: List<QM31, 32> = <(Option<CPEvalQM31>, List<QM31, 16>)>::into((Some(oods_cp_eval), list![]));
    let ctx: Ctx8 = fold::<hasher_add_qm31, 32>(cp_eval_list, ctx);

    let res: u256 = jet::sha_256_ctx_8_finalize(ctx);
    // Reset the num_sent counter
    (res, 0)
}

/// Reads the trace/cp polynomial evaluations at OODS, samples OODS point and random coefficient for DEEP quotients.
/// Fails if the computed CP evaluation does not match the sampled CP evaluation.
/// Returns the updated channel state and random coefficient for DEEP quotients.
fn oods(state: ChannelState, log_size: u8, oods_evals: OodsEvals, random_coeff: QM31) -> (ChannelState, QM31) {
    let (oods_trace_evals, oods_cp_eval): OodsEvals = oods_evals;

    // Draw OODS point
    let (state, oods_point): (ChannelState, QM31Point) = channel_draw_qm31_point(state);

    // Read sampled values and CP partitioned evaluation
    let state: ChannelState = channel_mix_oods_evals(state, oods_evals);

    // Evaluate composition polynomial at OODS point
    let cp_eval: QM31 = eval_composition_poly(log_size, oods_point, oods_trace_evals, random_coeff);
    
    // Reconstruct sampled CP evaluation and compare
    let sampled_cp_eval: QM31 = composition_poly_eval_from_decomposed(oods_cp_eval, oods_point);
    assert!(qm31_eq(cp_eval, sampled_cp_eval));

    // Draw random coefficient for DEEP quotients
    channel_draw_qm31(state)
}

fn test_oods() {
    let state: ChannelState = (0xf4101066b0addfbccce964d958b1dec28fcf4e2a9a280f15b8dfcb4176b65c99, 0);
    let log_size: u8 = 2;
    let random_coeff: QM31 = qm31(2012724549, 1128459570, 1584582850, 1454574268);
    let oods_trace_evals: TraceEvalsQM31 = list![
        list![qm31(1, 0, 0, 0)],
        list![qm31(1317558333, 30282626, 1003338644, 805043598)],
        list![qm31(962074990, 170174207, 1792910003, 764280909)],
        list![qm31(1150846786, 1548284776, 259211664, 74473918)],
    ];
    let oods_cp_eval: CPEvalQM31 = [
        qm31(1454521826, 1225905306, 1400157099, 1190844098),
        qm31(1028648943, 0, 0, 0),
        qm31(2147287039, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(1077048838, 1065010352, 1218756193, 72961446),
        qm31(1832027781, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(1384617206, 1935540515, 73491668, 934779802),
        qm31(1354939621, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(1615962367, 320491381, 618401992, 1994125905),
        qm31(180137318, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(0, 0, 0, 0),
    ];
    let oods_evals: OodsEvals = (oods_trace_evals, oods_cp_eval);
    let ((digest, _), deep_alpha): (ChannelState, QM31) = oods(state, log_size, oods_evals, random_coeff);
    assert!(jet::eq_256(digest, 0x7a974a58d6ebe09baa1373d9eda65b443a427796a4befe155a944ce9f9effbfd));
    assert!(qm31_eq(deep_alpha, qm31(2025520334, 1698313713, 620429472, 614470376)));
}

fn test_channel_mix_oods_evals() {
    let state: ChannelState = (0xf4101066b0addfbccce964d958b1dec28fcf4e2a9a280f15b8dfcb4176b65c99, 0);
    let oods_trace_evals: TraceEvalsQM31 = list![
        list![qm31(1, 0, 0, 0)],
        list![qm31(1317558333, 30282626, 1003338644, 805043598)],
        list![qm31(962074990, 170174207, 1792910003, 764280909)],
        list![qm31(1150846786, 1548284776, 259211664, 74473918)],
    ];
    let oods_cp_eval: CPEvalQM31 = [
        qm31(1454521826, 1225905306, 1400157099, 1190844098),
        qm31(1028648943, 0, 0, 0),
        qm31(2147287039, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(1077048838, 1065010352, 1218756193, 72961446),
        qm31(1832027781, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(1384617206, 1935540515, 73491668, 934779802),
        qm31(1354939621, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(1615962367, 320491381, 618401992, 1994125905),
        qm31(180137318, 0, 0, 0),
        qm31(0, 0, 0, 0),
        qm31(0, 0, 0, 0),
    ];
    let expected: u256 = 0x7a974a58d6ebe09baa1373d9eda65b443a427796a4befe155a944ce9f9effbfd;

    let (digest, _): ChannelState = channel_mix_oods_evals(state, (oods_trace_evals, oods_cp_eval));
    assert!(jet::eq_256(digest, expected));
}

#endif
