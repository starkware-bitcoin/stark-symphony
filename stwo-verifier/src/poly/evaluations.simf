// SPDX-FileCopyrightText: 2025 StarkWare Industries Ltd.
//
// SPDX-License-Identifier: MIT

#ifndef POLY_EVALUATIONS_H
#define POLY_EVALUATIONS_H

#include "fields/qm31.simf"

/// Maximum supported offset for an AIR column with transition constraints.
/// Upper bound not included, i.e. offset is in range [0, COL_MAX_OFFSET).
#define COL_MAX_OFFSET 4

/// Maximum supported number of columns in the AIR.
/// Upper bound not included, i.e. offset is in range [0, MAX_COLUMNS).
#define MAX_COLUMNS 256

/// A list of evaluations in QM31 for a given column.
/// TODO: consider using a tuple instead, we need at most 2 for Plonk.
type ColEvalsQM31 = List<QM31, COL_MAX_OFFSET>;

/// A list of evaluations in M31 for a given column.
type ColEvalsM31 = List<M31, COL_MAX_OFFSET>;

/// A list of evaluations in QM31 for all columns.
type TraceEvalsQM31 = List<ColEvalsQM31, MAX_COLUMNS>;

/// A list of evaluations in M31 for all columns.
type TraceEvalsM31 = List<ColEvalsM31, MAX_COLUMNS>;

/// Partitioned composition polynomial evaluation
type CPEvalQM31 = [QM31; 4];

/// Partitioned composition polynomial evaluation in M31.
type CPEvalM31 = [M31; 4];

/// Trace evaluations and composition polynomial evaluation at OODS point
type OodsEvals = (TraceEvalsQM31, CPEvalQM31);

/// Reconstructs the composition polynomial evaluation from the partitioned evaluations.
fn composition_poly_eval_from_partitions(partitioned_cp_eval: CPEvalQM31) -> QM31 {
    let (cp0, cp1, cp2, cp3): (QM31, QM31, QM31, QM31) = <CPEvalQM31>::into(partitioned_cp_eval);
    let res: QM31 = qm31_add(cp0, qm31_mul(cp1, qm31(0, 1, 0, 0)));
    let res: QM31 = qm31_add(res, qm31_mul(cp2, qm31(0, 0, 1, 0)));
    let res: QM31 = qm31_add(res, qm31_mul(cp3, qm31(0, 0, 0, 1)));
    res
}

fn test_composition_poly_eval_from_partitions() {
    let partitioned_cp_eval: CPEvalQM31 = [
        qm31(102457172, 120697777, 684798907, 704325503),
        qm31(1524382544, 864965792, 1090724300, 832226163),
        qm31(1447800586, 1051306930, 2035698572, 902029335),
        qm31(1674296998, 584689294, 411846336, 680031775)
    ];
    let expected: QM31 = qm31(634949303, 1333531166, 715684036, 225686437);

    let cp_eval: QM31 = composition_poly_eval_from_partitions(partitioned_cp_eval);
    assert!(qm31_eq(cp_eval, expected));
}

#endif
